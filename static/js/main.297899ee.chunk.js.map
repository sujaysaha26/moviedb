{"version":3,"sources":["images/movie.png","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","className","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","value","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Grid","header","children","Image","Thumb","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","button","Button","callback","onClick","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.297899ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/movie.7438fe4a.png\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.e7029961.svg\";","import styled from 'styled-components';\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    max-width: var(--maxWidth);\r\n    padding: 20px 0;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n    width: 200px;\r\n\r\n    @media screen and (max-width: 500px) {\r\n        width: 150px;\r\n    } \r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n    width: 100px;\r\n\r\n    @media screen and (max-width: 500px) {\r\n        width: 80px;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport RMDBLogo from '../../images/movie.png';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\r\n\r\nconst Header = () => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to='/'>\r\n                <LogoImg className='movieLogo' src={RMDBLogo} alt=\"rmdb-logo\"></LogoImg>\r\n            </Link>\r\n            <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo'></TMDBLogoImg>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Header","// Configuration for TMDB API\r\n// Read more about the API here: https://developers.themoviedb.org/\r\n\r\nconst API_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\r\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\r\n// For login and voting\r\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\r\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\r\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\r\n\r\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\r\n// Sizes: w300, w780, w1280, original\r\nconst BACKDROP_SIZE = 'w1280';\r\n// w92, w154, w185, w342, w500, w780, original\r\nconst POSTER_SIZE = 'w780';\r\n\r\nexport {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  IMAGE_BASE_URL,\r\n  BACKDROP_SIZE,\r\n  POSTER_SIZE,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    background: linear-gradient(\r\n        to bottom, rgba(0, 0, 0, 0)\r\n        41%, rgba(0, 0, 0, 0.65)\r\n        100%\r\n    ),\r\n        url(${({ image }) => image }), var(--darkGrey);\r\n        background-size: 100% cover;\r\n        background-position: center;\r\n        height: 600px;\r\n        position: relative;\r\n        animation: animateHeroImage 1s;\r\n\r\n\r\n        @keyframes animateHeroImage {\r\n            from {\r\n                opacity: 0;\r\n            }\r\n            to {\r\n                opacity: 1;\r\n            }\r\n        }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    padding: 20px;\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    z-index: 100;\r\n    max-width: absoulte;\r\n    bottom: 40px;\r\n    margin-right: 20px;\r\n    min-height: 100px;\r\n    color: var(--white);\r\n\r\n    h1 {\r\n        font-size: var(--fontSuperBig);\r\n\r\n        @media screen and (max-width: 720px) {\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n\r\n    p {\r\n        font-size: var(--fontMed);\r\n\r\n        @media screen and (max-width: 720px) {\r\n            font-size: var(--fontSmall)\r\n        }\r\n    }\r\n    @media screen and (max-width: 720px) {\r\n        max-width: 100%;\r\n    }\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Styles \r\nimport { Wrapper, Content, Text } from './HeroImage.styles';\r\n\r\nconst HeroImage = ({ image, title, text }) => (\r\n    <Wrapper image={image}>\r\n        <Content>\r\n            <Text>\r\n                <h1>{title}</h1>\r\n                <p>{text}</p>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nHeroImage.propTypes = {\r\n    image: PropTypes.string,\r\n    title: PropTypes.string,\r\n    text: PropTypes.string\r\n};\r\n\r\nexport default HeroImage;","import {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL\r\n} from './config';\r\n\r\nconst defaultConfig = {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\nconst apiSettings = {\r\n  fetchMovies: async (searchTerm, page) => {\r\n    const endpoint = searchTerm\r\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\r\n      : `${POPULAR_BASE_URL}&page=${page}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchMovie: async movieId => {\r\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchCredits: async movieId => {\r\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n    return await (await fetch(creditsEndpoint)).json();\r\n  },\r\n  // Bonus material below for login\r\n  getRequestToken: async () => {\r\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\r\n    return reqToken.request_token;\r\n  },\r\n  authenticate: async (requestToken, username, password) => {\r\n    const bodyData = {\r\n      username,\r\n      password,\r\n      request_token: requestToken\r\n    };\r\n    // First authenticate the requestToken\r\n    const data = await (\r\n      await fetch(LOGIN_URL, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify(bodyData)\r\n      })\r\n    ).json();\r\n    // Then get the sessionId with the requestToken\r\n    if (data.success) {\r\n      const sessionId = await (\r\n        await fetch(SESSION_ID_URL, {\r\n          ...defaultConfig,\r\n          body: JSON.stringify({ request_token: requestToken })\r\n        })\r\n      ).json();\r\n      return sessionId;\r\n    }\r\n  },\r\n  rateMovie: async (sessionId, movieId, value) => {\r\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\r\n\r\n    const rating = await (\r\n      await fetch(endpoint, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify({ value })\r\n      })\r\n    ).json();\r\n\r\n    return rating;\r\n  }\r\n};\r\n\r\nexport default apiSettings;\r\n","// Convert time to hours and minutes\r\nexport const calcTime = time => {\r\n  const hours = Math.floor(time / 60);\r\n  const mins = time % 60;\r\n  return `${hours}h ${mins}m`;\r\n};\r\n// Convert a number to money formatting\r\nexport const convertMoney = money => {\r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'INR',\r\n    minimumFractionDigits: 0,\r\n  });\r\n  return formatter.format(money);\r\n};\r\n\r\nexport const isPersistedState = stateName => {\r\n  const sessionState = sessionStorage.getItem(stateName);\r\n  return sessionState && JSON.parse(sessionState);\r\n};","import { useState, useEffect } from \"react\";\r\n\r\n// API \r\nimport API from '../API'\r\n\r\n// Helpers\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    results: [],\r\n    total_pages: 0,\r\n    total_results: 0\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [state, setState] = useState(initialState);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n    const fetchMovies = async (page, searchTerm = \"\") => {\r\n        try {\r\n            setError(false);\r\n            setLoading(true);\r\n\r\n            const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n            setState(prev => ({\r\n                ...movies,\r\n                results:\r\n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\r\n            }))\r\n        }\r\n        catch (error) {\r\n            setError(true);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    // Initial and search\r\n    useEffect(() => {\r\n        if (!searchTerm) {\r\n            const sessionState = isPersistedState('homeState');\r\n\r\n            if (sessionState) {\r\n                setState(sessionState);\r\n                return;\r\n            }\r\n        }\r\n\r\n        setState(initialState);\r\n        fetchMovies(1, searchTerm);\r\n    }, [searchTerm]);\r\n\r\n    // Load More\r\n    useEffect(() => {\r\n        if (!isLoadingMore) return;\r\n\r\n        fetchMovies(state.page + 1, searchTerm)\r\n        setIsLoadingMore(false);\r\n    }, [isLoadingMore, searchTerm, state.page])\r\n\r\n    // Write to session Storage\r\n    useEffect(() => {\r\n        if (!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state))\r\n    }, [searchTerm, state]);\r\n\r\n    return { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore };\r\n}","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n    padding: 0 20px;\r\n\r\n    h1 {\r\n        color: var(--medGrey);\r\n\r\n        @media screen and (max-width: 768px) {\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n    grid-gap: 2rem;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Styles\r\nimport { Wrapper, Content } from './Grid.styles';\r\n\r\nconst Grid = ({ header, children }) => (\r\n    <Wrapper>\r\n        <h1>{header}</h1>\r\n        <Content>{children}</Content>\r\n    </Wrapper>\r\n);\r\n\r\nGrid.propTypes = {\r\n    header: PropTypes.string\r\n};\r\n\r\nexport default Grid;","import styled from 'styled-components';\r\n\r\nexport const Image = styled.img`\r\n    width: 100%;\r\n    max-width: 720px;\r\n    transition: all 0.3s;\r\n    object-fit: cover;\r\n    border-radius: 20px;\r\n    animation: animateThumb 0.5s;\r\n\r\n    :hover {\r\n        opacity: .8;\r\n    }\r\n\r\n    @keyframes animateThumb {\r\n        from {\r\n            opacity: 0;\r\n        }\r\n        to {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Styles\r\nimport { Image } from './Thumb.styles';\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n    <div>\r\n        {clickable ? (\r\n            <Link to={`/${movieId}`}>\r\n                <Image src={image} alt='movie-thumb' />\r\n            </Link>\r\n        ) : (\r\n            <Image src={image} alt='movie-thumb' />\r\n        )}\r\n    </div>\r\n);\r\n\r\nThumb.propTypes = {\r\n    image: PropTypes.string,\r\n    movieId: PropTypes.number,\r\n    clickable: PropTypes.bool\r\n};\r\n\r\nexport default Thumb;","import { Spinner } from \"./Spinner.styles\";\r\n\r\nexport default Spinner;","import styled from 'styled-components';\r\n\r\nexport const Spinner = styled.div`\r\n    border: 5px solid var(--lightGrey);\r\n    border-top: 5px solid var(--medGrey);\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    animation: spin 0.8s linear infinite;\r\n    margin: 20px auto;\r\n\r\n    @keyframes spin {\r\n        0% {\r\n            transform: rotate(0deg);\r\n        }\r\n        100% {\r\n            transform: rotate(360deg);\r\n        }\r\n    }\r\n`;","export default __webpack_public_path__ + \"static/media/search-icon.bb4c697f.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    height: 100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    position: relative;\r\n    max-width: var(--maxWidth);\r\n    width: 100%;\r\n    height: 55px;\r\n    background: var(--medGrey);\r\n    margin: 0 auto;\r\n    border-radius: 40px;\r\n    color: var(--white);\r\n\r\n    img {\r\n        position: absolute;\r\n        left: 15px;\r\n        top: 14px;\r\n        width: 30px;\r\n    }\r\n\r\n    input {\r\n        font-size: var(--fontBig);\r\n        position: absolute;\r\n        left: 0;\r\n        margin: 8px 0;\r\n        padding: 0 0 0 60px;\r\n        border: 0;\r\n        width: 95%;\r\n        background: transparent;\r\n        height: 40px;\r\n        color: var(--white);\r\n\r\n        :focus {\r\n            outline: none;\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Image\r\nimport searchIcon from '../../images/search-icon.svg';\r\n\r\n// Styles\r\nimport { Wrapper, Content } from './SearchBar.styles';\r\n\r\nconst SearchBar = ({ setSearchTerm }) => {\r\n    const [state, setState] = useState('');\r\n    const initial = useRef(true);\r\n\r\n    useEffect(() => {\r\n        if (initial.current) {\r\n            initial.current = false;\r\n            return;\r\n        }\r\n        \r\n        const timer = setTimeout(() => {\r\n            setSearchTerm(state);\r\n        }, 500)\r\n\r\n        return () => clearTimeout(timer)\r\n    }, [setSearchTerm, state])\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Content>\r\n                <img src={searchIcon} alt='search-icon'/>\r\n                <input type='text' placeholder='Search Movie'\r\n                onChange={event => setState(event.currentTarget.value)}\r\n                value={state}\r\n                />\r\n            </Content>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n    callback: PropTypes.func\r\n};\r\n\r\nexport default SearchBar;","import styled\r\n from \"styled-components\";\r\n\r\n export const Wrapper = styled.button`\r\n    display: block;\r\n    background: var(--darkGrey);\r\n    width: 25%;\r\n    min-width: 200px;\r\n    height: 60px;\r\n    border-radius: 30px;\r\n    color: var(--white);\r\n    border: 0;\r\n    font-size: var(--fontBig);\r\n    margin: 20px auto;\r\n    transition: all 0.3s;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    :hover {\r\n        opacity: .8;\r\n    }\r\n `;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Styles\r\nimport { Wrapper } from './Button.styles';\r\n\r\nconst Button = ({ text, callback }) => (\r\n    <Wrapper type='button' onClick={callback}>\r\n        {text}\r\n    </Wrapper>\r\n);\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    callback: PropTypes.func\r\n};\r\n\r\nexport default Button","import React from 'react';\r\n\r\n\r\n// Config \r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config'\r\n// Components\r\nimport HeroImage from './HeroImage';\r\n// Hook\r\nimport { useHomeFetch } from '../hooks/useHomeFetch';\r\n// Image\r\nimport NoImage from '../images/no_image.jpg';\r\nimport Grid from './Grid';\r\nimport Thumb from './Thumb';\r\nimport Spinner from './Spinner';\r\nimport SearchBar from './SearchBar';\r\nimport Button from './Button';\r\n\r\n\r\nconst Home = () => {\r\n    const { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore } = useHomeFetch();\r\n\r\n    if (error) return <div>Something went wrong...</div>\r\n\r\n    return (\r\n        <>\r\n            {state.results[0] ?\r\n            <HeroImage\r\n                image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n                title={state.results[0].original_title}\r\n                text={state.results[0].overview}\r\n            /> \r\n            : null}\r\n            <SearchBar setSearchTerm={setSearchTerm}/>\r\n            <Grid header={searchTerm ? 'Search Result' : 'Popular Movies'}>\r\n                {state.results.map(movie => (\r\n                    <Thumb\r\n                        key={movie.id}\r\n                        clickable\r\n                        image={\r\n                            movie.poster_path\r\n                                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                                : NoImage\r\n                        }\r\n                        movieId={movie.id}\r\n                    />\r\n                ))}\r\n            </Grid>\r\n            {loading && <Spinner/>}\r\n            {state.page < state.total_pages && !loading && (\r\n                <Button text='Load More' callback={() => setIsLoadingMore(true)}/>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 70px;\r\n  background: var(--medGrey);\r\n  color: var(--white);\r\n\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: var(--maxWidth);\r\n  padding: 0 20px;\r\n\r\n  span {\r\n      font-size: var(--fontMed);\r\n      color: var(--white);\r\n      padding-right: 10px;\r\n\r\n      @media screen and (max-width: 768px) {\r\n          font-size: var(--fontSmall);\r\n      }\r\n  }\r\n`;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Styles\r\nimport { Wrapper, Content } from './BreadCrumb.styles';\r\n\r\nconst BreadCrumb = ({ movieTitle }) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to='/'>\r\n                <span>Home</span>\r\n            </Link>\r\n            <span>|</span>\r\n            <span>{movieTitle}</span>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nBreadCrumb.propTypes = {\r\n    movieTitle: PropTypes.string\r\n};\r\n\r\nexport default BreadCrumb;","import styled from \"styled-components\";\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from \"../../config\";\r\n\r\nexport const Wrapper = styled.div`\r\n    background: ${({ backdrop }) =>\r\n        backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\r\n    background-size: cover;\r\n    background-position: center;\r\n    padding: 40px 20px;\r\n    animation: animateMovieInfo 1s;\r\n\r\n    @keyframes animateMovieInfo {\r\n        from {\r\n            opacity: 0;\r\n        }\r\n        to {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n    background: rgba(0, 0, 0, 0.7);\r\n    border-radius: 20px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        display: block;\r\n        max-height: none;\r\n    }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    width: 100%;\r\n    padding: 20px 40px;\r\n    color: var(--white);\r\n    overflow: hidden;\r\n\r\n    .rating-directors {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n    }\r\n\r\n    .score {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 35px;\r\n        height: 35px;\r\n        background: #fff;\r\n        color: #000;\r\n        font-weight: 800;\r\n        border-radius: 50%;\r\n        margin: 0;\r\n    }\r\n\r\n    .director {\r\n        margin: 0 0 0 40px;\r\n\r\n        p {\r\n            margin: 0;\r\n        }\r\n    }\r\n\r\n    h1 {\r\n        @media screen and (max-width: 768px) {\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Components\r\nimport Thumb from '../Thumb';\r\n\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\r\n\r\n// Image\r\nimport NoImage from '../../images/no_image.jpg';\r\n\r\n// Styles\r\nimport { Wrapper, Content, Text } from './MovieInfo.styles';\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n    <Wrapper backdrop={movie.backdrop_path}>\r\n        <Content>\r\n            <Thumb \r\n                image={\r\n                movie.poster_path\r\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n                : NoImage\r\n            }\r\n            clickable={false}\r\n            ></Thumb>\r\n            <Text>\r\n                <h1>{movie.title}</h1>\r\n                <h3>PLOT</h3>\r\n                <p>{movie.overview}</p>\r\n\r\n                <div className='rating-directors'>\r\n                    <div>\r\n                        <h3>RATING</h3>\r\n                        <div className='score'>{movie.vote_average}</div>\r\n                    </div>\r\n                    <div className='director'>\r\n                        <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\r\n                        {movie.directors.map(director => (\r\n                            <p key={director.credit_id}>{director.name}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nMovieInfo.propTypes = {\r\n    movie: PropTypes.object\r\n};\r\n\r\n\r\nexport default MovieInfo;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: 100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    max-width: var(--maxWidth);\r\n    width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .column {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background: var(--medGrey);\r\n        border-radius: 20px;\r\n        margin: 0 20px;\r\n        flex: 1;\r\n\r\n        :first-child {\r\n            margin-left: 0;\r\n        }\r\n\r\n        :last-child {\r\n            margin-right: 0;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 768px) {\r\n        display: block;\r\n\r\n        .column {\r\n            margin: 20px 0;\r\n        }\r\n    }\r\n\r\n \r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Helpers\r\nimport { calcTime, convertMoney } from '../../helpers';\r\n\r\n// Styles\r\nimport { Wrapper, Content } from './MovieInfoBar.styles';\r\n\r\nconst MovieInfoBar = ({ time, budget, revenue}) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <div className='column'>\r\n                <p>Running time: {calcTime(time)}</p>\r\n            </div>\r\n            <div className='column'>\r\n                <p>Budget: {convertMoney(budget)}</p>\r\n            </div>\r\n            <div className='column'>\r\n                <p>Revenue: {convertMoney(revenue)}</p>\r\n            </div>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nMovieInfoBar.propTypes = {\r\n    time: PropTypes.number,\r\n    budget: PropTypes.number,\r\n    revenue: PropTypes.number\r\n};\r\n\r\nexport default MovieInfoBar","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    color: var(--white);\r\n    background: var(--darkGrey);\r\n    border-radius: 20px;\r\n    padding: 5px;\r\n    text-align: center;\r\n\r\n    h3 {\r\n        margin: 10 0 0 0;\r\n    }\r\n\r\n    p {\r\n        margin: 5px 0;\r\n    }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n    display: block;\r\n    width: 100%;\r\n    height: 200px;\r\n    object-fit: cover;\r\n    border-radius: 15px;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Styles\r\nimport { Wrapper, Image } from './Actor.styles';\r\n\r\nconst Actor = ({ name, character, imageUrl }) => (\r\n    <Wrapper>\r\n        <Image src={imageUrl} alt='actor-thumb' />\r\n        <h3>{name}</h3>\r\n        <p>{character}</p>\r\n    </Wrapper>\r\n);\r\n\r\nActor.propTypes = {\r\n    name: PropTypes.string,\r\n    character: PropTypes.string,\r\n    imageUrl: PropTypes.string,\r\n}\r\n\r\nexport default Actor;","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\r\n\r\n// Components\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport BreadCrumb from './BreadCrumb';\r\nimport MovieInfo from './MovieInfo';\r\nimport MovieInfoBar from './MovieInfoBar';\r\nimport Actor from './Actor';\r\n\r\n// Hook\r\nimport { useMovieFetch } from '../hooks/useMovieFetch';\r\n\r\n// Image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nconst Movie = () => {\r\n    const { movieId } = useParams();\r\n    const { state: movie, loading, error } = useMovieFetch(movieId);\r\n\r\n    if (loading) return <Spinner />\r\n    if (error) return <div>Something went wrong...</div>;\r\n    return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title} />\r\n            <MovieInfo movie={movie} />\r\n            <MovieInfoBar time={movie.runtime} budget={movie.budget} revenue={movie.revenue} />\r\n            <Grid>\r\n                {movie.actors.map(actor => (\r\n                    <Actor\r\n                        key={actor.credit_id}\r\n                        name={actor.name}\r\n                        character={actor.character}\r\n                        imageUrl={\r\n                            actor.profile_path\r\n                                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                                : NoImage\r\n                        }\r\n                    />\r\n                ))}\r\n            </Grid>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default Movie;","import { useState, useEffect, useCallback } from \"react\";\r\nimport API from '../API';\r\n\r\n// Helpers\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMovie = async() => {\r\n            try {\r\n                setLoading(true);\r\n                setError(false);\r\n\r\n                const Movie = await API.fetchMovie(movieId);\r\n                const credits = await API.fetchCredits(movieId);\r\n\r\n                // Get directors only\r\n                const directors = credits.crew.filter(\r\n                    member => member.job === 'Director'\r\n                );\r\n\r\n                setState({\r\n                    ...Movie,\r\n                    actors: credits.cast,\r\n                    directors\r\n                })\r\n\r\n                setLoading(false);\r\n            }\r\n            catch {\r\n                setError(true);\r\n            }\r\n        };\r\n\r\n        const sessionState = isPersistedState(movieId);\r\n        if (sessionState) {\r\n            setState(sessionState);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        fetchMovie();\r\n    }, [movieId]);\r\n\r\n    // Write in sessionStorage\r\n    useEffect(() => {\r\n        sessionStorage.setItem(movieId, JSON.stringify(state));\r\n    }, [movieId, state])\r\n\r\n    return { state, loading, error }\r\n}","import React from 'react';\r\n\r\nconst NotFound = () => <div>Not Found</div>\r\n\r\nexport default NotFound;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root {\r\n        --maxWidth: 1280px;\r\n        --white: #fff;\r\n        --lightGrey: #eee;\r\n        --medGrey: #353535;\r\n        --darkGrey: #1c1c1c;\r\n        --fontSuperBig: 2.5rem;\r\n        --fontBig: 1.5rem;\r\n        --fontMed: 1.2rem;\r\n        --fontSmall: 1rem;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Abel', sans-serif;\r\n    }\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        h1 {\r\n            font-size: 2rem;\r\n            font-weight: 600;\r\n            color: var(--white);\r\n        }\r\n        h3 {\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n        }\r\n        p {\r\n            font-size: 1rem;\r\n            color: var(--white);\r\n        }\r\n    }\r\n\r\n`;","import React from 'react';\r\n\r\n// Routing\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\n\r\n// Components\r\nimport Header from './components/Header';\r\nimport Home from './components/Home';\r\nimport Movie from './components/Movie';\r\nimport NotFound from './components/NotFound';\r\n\r\n// Styles \r\nimport { GlobalStyle } from './GlobalStyle';\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <Header />\r\n    <Routes>\r\n      <Route path='/' element={<Home/>}></Route>\r\n      <Route path='/:movieId' element={<Movie/>}></Route>\r\n      <Route path='/*' element={<NotFound/>}></Route>\r\n    </Routes>\r\n    <GlobalStyle />\r\n  </Router>\r\n);\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}